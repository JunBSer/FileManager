// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Education\LabWorks\Code\4Semester\CSnN\Computer-Networks\lab3\FileManager\internal\repository\file_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	fs "io/fs"
	reflect "reflect"

	repository "github.com/JunBSer/FileManager/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// AppendData mocks base method.
func (m *MockFileRepository) AppendData(ctx context.Context, file repository.FileHandle, data []byte, pos int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendData", ctx, file, data, pos)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendData indicates an expected call of AppendData.
func (mr *MockFileRepositoryMockRecorder) AppendData(ctx, file, data, pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendData", reflect.TypeOf((*MockFileRepository)(nil).AppendData), ctx, file, data, pos)
}

// DeleteFile mocks base method.
func (m *MockFileRepository) DeleteFile(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileRepositoryMockRecorder) DeleteFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileRepository)(nil).DeleteFile), ctx, path)
}

// GetFileHandle mocks base method.
func (m *MockFileRepository) GetFileHandle(ctx context.Context, path string, openOption int) (repository.FileHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileHandle", ctx, path, openOption)
	ret0, _ := ret[0].(repository.FileHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileHandle indicates an expected call of GetFileHandle.
func (mr *MockFileRepositoryMockRecorder) GetFileHandle(ctx, path, openOption interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileHandle", reflect.TypeOf((*MockFileRepository)(nil).GetFileHandle), ctx, path, openOption)
}

// GetReadSize mocks base method.
func (m *MockFileRepository) GetReadSize() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadSize")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetReadSize indicates an expected call of GetReadSize.
func (mr *MockFileRepositoryMockRecorder) GetReadSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadSize", reflect.TypeOf((*MockFileRepository)(nil).GetReadSize))
}

// ListDir mocks base method.
func (m *MockFileRepository) ListDir(ctx context.Context, path string) ([]repository.DirectoryEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDir", ctx, path)
	ret0, _ := ret[0].([]repository.DirectoryEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDir indicates an expected call of ListDir.
func (mr *MockFileRepositoryMockRecorder) ListDir(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDir", reflect.TypeOf((*MockFileRepository)(nil).ListDir), ctx, path)
}

// MoveFile mocks base method.
func (m *MockFileRepository) MoveFile(ctx context.Context, dstPath, srcPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFile", ctx, dstPath, srcPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFile indicates an expected call of MoveFile.
func (mr *MockFileRepositoryMockRecorder) MoveFile(ctx, dstPath, srcPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFile", reflect.TypeOf((*MockFileRepository)(nil).MoveFile), ctx, dstPath, srcPath)
}

// ReadFile mocks base method.
func (m *MockFileRepository) ReadFile(ctx context.Context, file repository.FileHandle, pos int64) ([]byte, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, file, pos)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileRepositoryMockRecorder) ReadFile(ctx, file, pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileRepository)(nil).ReadFile), ctx, file, pos)
}

// MockFileHandle is a mock of FileHandle interface.
type MockFileHandle struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandleMockRecorder
}

// MockFileHandleMockRecorder is the mock recorder for MockFileHandle.
type MockFileHandleMockRecorder struct {
	mock *MockFileHandle
}

// NewMockFileHandle creates a new mock instance.
func NewMockFileHandle(ctrl *gomock.Controller) *MockFileHandle {
	mock := &MockFileHandle{ctrl: ctrl}
	mock.recorder = &MockFileHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandle) EXPECT() *MockFileHandleMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFileHandle) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileHandleMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileHandle)(nil).Close))
}

// Read mocks base method.
func (m *MockFileHandle) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileHandleMockRecorder) Read(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileHandle)(nil).Read), b)
}

// Seek mocks base method.
func (m *MockFileHandle) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockFileHandleMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFileHandle)(nil).Seek), offset, whence)
}

// Stat mocks base method.
func (m *MockFileHandle) Stat() (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileHandleMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFileHandle)(nil).Stat))
}

// Write mocks base method.
func (m *MockFileHandle) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockFileHandleMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFileHandle)(nil).Write), b)
}
